// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.4
// source: service.proto

package codegen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MessageDBworkerServiceClient is the client API for MessageDBworkerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessageDBworkerServiceClient interface {
	Operation(ctx context.Context, opts ...grpc.CallOption) (MessageDBworkerService_OperationClient, error)
}

type messageDBworkerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMessageDBworkerServiceClient(cc grpc.ClientConnInterface) MessageDBworkerServiceClient {
	return &messageDBworkerServiceClient{cc}
}

func (c *messageDBworkerServiceClient) Operation(ctx context.Context, opts ...grpc.CallOption) (MessageDBworkerService_OperationClient, error) {
	stream, err := c.cc.NewStream(ctx, &MessageDBworkerService_ServiceDesc.Streams[0], "/auth.MessageDBworkerService/Operation", opts...)
	if err != nil {
		return nil, err
	}
	x := &messageDBworkerServiceOperationClient{stream}
	return x, nil
}

type MessageDBworkerService_OperationClient interface {
	Send(*Request) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type messageDBworkerServiceOperationClient struct {
	grpc.ClientStream
}

func (x *messageDBworkerServiceOperationClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *messageDBworkerServiceOperationClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MessageDBworkerServiceServer is the server API for MessageDBworkerService service.
// All implementations must embed UnimplementedMessageDBworkerServiceServer
// for forward compatibility
type MessageDBworkerServiceServer interface {
	Operation(MessageDBworkerService_OperationServer) error
	mustEmbedUnimplementedMessageDBworkerServiceServer()
}

// UnimplementedMessageDBworkerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMessageDBworkerServiceServer struct {
}

func (UnimplementedMessageDBworkerServiceServer) Operation(MessageDBworkerService_OperationServer) error {
	return status.Errorf(codes.Unimplemented, "method Operation not implemented")
}
func (UnimplementedMessageDBworkerServiceServer) mustEmbedUnimplementedMessageDBworkerServiceServer() {
}

// UnsafeMessageDBworkerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessageDBworkerServiceServer will
// result in compilation errors.
type UnsafeMessageDBworkerServiceServer interface {
	mustEmbedUnimplementedMessageDBworkerServiceServer()
}

func RegisterMessageDBworkerServiceServer(s grpc.ServiceRegistrar, srv MessageDBworkerServiceServer) {
	s.RegisterService(&MessageDBworkerService_ServiceDesc, srv)
}

func _MessageDBworkerService_Operation_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MessageDBworkerServiceServer).Operation(&messageDBworkerServiceOperationServer{stream})
}

type MessageDBworkerService_OperationServer interface {
	Send(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type messageDBworkerServiceOperationServer struct {
	grpc.ServerStream
}

func (x *messageDBworkerServiceOperationServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *messageDBworkerServiceOperationServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MessageDBworkerService_ServiceDesc is the grpc.ServiceDesc for MessageDBworkerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MessageDBworkerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth.MessageDBworkerService",
	HandlerType: (*MessageDBworkerServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Operation",
			Handler:       _MessageDBworkerService_Operation_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "service.proto",
}
